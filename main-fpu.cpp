#include <iostream>
#include <bitset>
using namespace std;



int main()
{
  setlocale(LC_ALL, "Russian");

  // ЗАДАНИЕ 1
  float a, b, c;
  cout << "Введите 3 вещественных числа, чтобы получить их сумму: ";
  cin >> a >> b >> c;
  float sum = 0.0f;

  __asm
  {
    finit // Инициализируем процессор вещественных чисел (FPU)

    // Добавляем все три числа в стек.
    fld a
    fld b
    fld c

    // Сейчас стек: с b a
    fadd // Сейчас стек: (с + b) a
    fadd // Сейчас стек: (c + b + a)

    fstp sum // Извлекаем вершину стека в sum.

  }
  cout << "Сумма равна: " << sum << endl << endl;


  // ЗАДАНИЕ 2
  __asm
  {
    finit
    fstp sum
  }
  cout << "Не число: " << sum << endl << endl;


  // ЗАДАНИЕ 3
  int sw, cw;
  __asm
  {
    fstsw sw // Записываем слово состояния в sw.
    fstcw cw // Записываем слово управления в cw.
  }
  cout << "Слово состояния: " << bitset<16>(sw) << endl;
  cout << "Слово управления: " << bitset<16>(cw) << endl;
  // Попробуем поделить на ноль при том, что третьем бите "деление на ноль" стоит 1.
  a = 5;
  b = 0;
  __asm
  {
    finit
    fld a
    fld b
    fdiv // Делим на ноль.
    fstp sum
  }
  cout << "Попытка деления на 0: " << sum << endl << endl;


  // ЗАДАНИЕ 4
  a = 5;
  b = 0;
  __asm
  {
    finit

    // Делаем третий бит слова управления равным нулю с помощью маски 1111 1111 1111 1011
    fstcw cw
    //and cw, 0xFFFB
    fldcw cw

    fld a
    fld b
    fdiv
    fstp sum
  }


  // ЗАДАНИЕ 5
  // Перевод числа 16.02 в двоичную систему

  // 16 в двоичной = 1000
  // .02 переводим в двоичную: умножаем дробную часть на 2 и смотрим целую часть
  //0.02 * 2 = 0.04
  //0.04 * 2 = 0.08
  //0.08 * 2 = 0.16
  //0.16 * 2 = 0.32
  //0.32 * 2 = 0.64
  //0.64 * 2 = 1.28
  //0.28 * 2 = 0.56
  //0.56 * 2 = 1.12
  //0.12 * 2 = 0.24
  //0.24 * 2 = 0.48
  //0.48 * 2 = 0.96
  //0.96 * 2 = 1.92
  //0.92 * 2 = 1.84
  //0.84 * 2 = 1.68
  //0.68 * 2 = 1.36
  //0.36 * 2 = 0.72
  //0.72 * 2 = 1.44
  //0.44 * 2 = 0.88
  //0.88 * 2 = 1.76

  // Запишем число в двоичной системе счисления: 10000.0000010100011110101
  // Нормализуем, получим 1.00000000010100011110101 * 2^4

  // Истиное значение порядка 4
  // Знак положительный - это 0
  // Порядок - это смещение + истиный порядок то есть
  // 01111111 + 100 = 10000011

  //Итак, получаем

  //0 10000011 00000000010100011110101

  // Финальный ответ
  //0100 0001 1000 0000 0010 1000 1111 0101
  //418028F5
  

  return 0;
}
